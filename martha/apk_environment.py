import re
import json
import pickle
import gym
import igraph
import os

from typing import List, Tuple, Any, Union, Dict
from gym.utils import seeding

from .gui_element import GuiElement
from .apk import Apk
from .logcatwatcher import LogcatWatcher
from .residmanager import ResourceIDManager

from screen import ScreenObject
from saveScreen import ScreenData

class ApkEnvironment(gym.Env):

    def __init__(self, apk: Apk):
        self.apk = apk

        # inherited variables
        self.action_space = None
        self.observation_space = None

        # this file should be generated by 'python layout.py APK'
        with open('intermediates/onclicks.p','rb') as f:
            self.layout_onclicks = pickle.load(f)

        self.call_graph = igraph.Graph.Read_Pickle('intermediates/graph.p') #NOTE graph.p is generated by a preprocessing step by 'python callgraph.py APK'

        self.residmanager = ResourceIDManager(f'{os.environ["HOME"]}/Downloads/00a2d33447e572fff3b0f5ecf40e0c53596f6952c94db385be4720ea249cff5b_instrumented.apk') #TODO replace with pyaxmlreader
        self.logcatwatcher = LogcatWatcher(self.residmanager, self.layout_onclicks)

    def get_curr_state(self):
        pass
    
    def reset(self):
        pass

    def step(self, arg_action_id: int):
        pass

    def seed(self, arg_seed: int=None):
        pass

    def render(self, mode: str="human"):
        pass

    def close(self):
        pass

    def get_apk_call_graph(self, arg_apk: Apk) -> igraph.Graph:
        return self.call_graph

    # todo: Daniel
    # this returns the corresponding vertex (node) from the call graph given an action
    def get_node_for_action(self, arg_action: GuiElement) -> igraph.Vertex:
        click_map = self.logcatwatcher.get_click_map()
        
        if arg_action.resource_id in click_map:
            funct_name = click_map[arg_action.resource_id]
            try:
                return self.call_graph.vs['name'].index(funct_name)
            except:
                print(f"Error: could not find function {funct_name} in call graph")
                return None
        else:
           return None 

    # todo: Li-el
    def get_abstract_whxml(self, arg_whxml: str, arg_nrow: int, arg_ncol: int, arg_nchannel: int) -> Any:
        screen = ScreenObject(arg_whxml, 1440, 2960)
        screen.setRelevantComponents(['clickable'])
        screen.fixedChannels =arg_nchannel
        screen.createFixedChannels()
        screen.setTileDimensions((arg_nrow, arg_ncol))
        return screen
        
       

